(declare-datatypes () ((D mf ff ss hw ms sp)))
(declare-fun Costs (D) Int)
(assert (= (Costs mf) 215))
(assert (= (Costs ff) 275))
(assert (= (Costs ss) 335))
(assert (= (Costs hw) 355))
(assert (= (Costs ms) 420))
(assert (= (Costs sp) 580))
(declare-const nmf Int)
(declare-const nff Int)
(declare-const nss Int)
(declare-const nhw Int)
(declare-const nms Int)
(declare-const nsp Int)
(assert (<= 0 nmf))
(assert (<= 0 nff))
(assert (<= 0 nss))
(assert (<= 0 nhw))
(assert (<= 0 nms))
(assert (<= 0 nsp))
(assert (= 1505 (+ (* nmf (Costs mf)) (* nff (Costs ff)) (* nss (Costs ss)) (* nhw (Costs hw)) (* nms (Costs ms)) (* nsp (Costs sp)))))
(check-sat)
(get-value (nmf nff nss nhw nms nsp))

(push)
(assert (not (= nmf 7)))
(echo "")
(check-sat)
(get-value (nmf nff nss nhw nms nsp))
(pop)

(push)
(assert (not (= nmf 7)))
(assert (not (and (= nmf 1) (= nhw 2) (= nsp 1))))
(echo "")
(check-sat)
(get-value (nmf nff nss nhw nms nsp))
(pop)
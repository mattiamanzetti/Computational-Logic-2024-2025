(define-fun absval ((x Int)) Int (ite (< x 0) (- x) x))
(declare-datatypes () ((C c1 c2)))
(define-fun PRE ((x Int) (y Int) (v (Array C Bool))) Bool 
    (and 
        (= x 1) (= y 1)
        (forall ((x C)) (not (select v x)))
    )
)
(define-fun POST ((x Int) (y Int) (v (Array C Bool))) Bool 
    (and 
        (= x 8) (= y 8)
        (select v c1) 
        (select v c2)
    )
)
(define-fun TRANS ((x Int) (y Int) (xp Int) (yp Int) (v (Array C Bool)) (vp (Array C Bool))) Bool
            (and 
                (<= 1 xp) (<= 1 yp) (<= xp 8) (<= yp 8)
                (not (and (= xp 1) (= yp 4)))
                (not (and (= xp 1) (= yp 5)))
                (not (and (= xp 2) (= yp 1)))
                (not (and (= xp 2) (= yp 2)))
                (not (and (= xp 2) (= yp 7)))
                (not (and (= xp 3) (= yp 2)))
                (not (and (= xp 3) (= yp 4)))
                (not (and (= xp 3) (= yp 5)))
                (not (and (= xp 3) (= yp 7)))
                (not (and (= xp 4) (= yp 6)))
                (not (and (= xp 5) (= yp 1)))
                (not (and (= xp 5) (= yp 3)))
                (not (and (= xp 5) (= yp 4)))
                (not (and (= xp 5) (= yp 6)))
                (not (and (= xp 5) (= yp 7)))
                (not (and (= xp 6) (= yp 3)))
                (not (and (= xp 6) (= yp 5)))
                (not (and (= xp 6) (= yp 7)))
                (not (and (= xp 7) (= yp 1)))
                (not (and (= xp 7) (= yp 8)))
                (not (and (= xp 8) (= yp 3)))
                (not (and (= xp 8) (= yp 5)))
                (not (and (= xp 8) (= yp 6)))
                (or 
                    (and (= (absval(- xp x)) 1) (= (absval (- yp y)) 0))
                    (and (= (absval(- xp x)) 0) (= (absval (- yp y)) 1))
                    (and (= xp x) (= yp y))
                )
                (= vp v)
                (ite (and (= xp 1) (= yp 8)) (= v (store v c1 true)) (= v (store v c1 false)))
                (ite (and (= xp 6) (= yp 6)) (= v (store v c2 true)) (= v (store v c2 false)))
))


(declare-const x0 Int)
(declare-const y0 Int)
(declare-const x1 Int)
(declare-const y1 Int)
(declare-const x2 Int)
(declare-const y2 Int)
(declare-const x3 Int)
(declare-const y3 Int)
(declare-const x4 Int)
(declare-const y4 Int)
(declare-const x5 Int)
(declare-const y5 Int)
(declare-const x6 Int)
(declare-const y6 Int)
(declare-const x7 Int)
(declare-const y7 Int)
(declare-const x8 Int)
(declare-const y8 Int)
(declare-const x9 Int)
(declare-const y9 Int)
(declare-const x10 Int)
(declare-const y10 Int)
(declare-const x11 Int)
(declare-const y11 Int)
(declare-const x12 Int)
(declare-const y12 Int)
(declare-const x13 Int)
(declare-const y13 Int)
(declare-const x14 Int)
(declare-const y14 Int)
(declare-const x15 Int)
(declare-const y15 Int)
(declare-const x16 Int)
(declare-const y16 Int)
(declare-const x17 Int)
(declare-const y17 Int)
(declare-const x18 Int)
(declare-const y18 Int)
(declare-const x19 Int)
(declare-const y19 Int)
(declare-const x20 Int)
(declare-const y20 Int)
(declare-const x21 Int)
(declare-const y21 Int)
(declare-const x22 Int)
(declare-const y22 Int)

(declare-const v0 (Array C Bool))
(declare-const v1 (Array C Bool))
(declare-const v2 (Array C Bool))
(declare-const v3 (Array C Bool))
(declare-const v4 (Array C Bool))
(declare-const v5 (Array C Bool))
(declare-const v6 (Array C Bool))
(declare-const v7 (Array C Bool))
(declare-const v8 (Array C Bool))
(declare-const v9 (Array C Bool))
(declare-const v10 (Array C Bool))
(declare-const v11 (Array C Bool))
(declare-const v12 (Array C Bool))
(declare-const v13 (Array C Bool))
(declare-const v14 (Array C Bool))
(declare-const v15 (Array C Bool))
(declare-const v16 (Array C Bool))
(declare-const v17 (Array C Bool))
(declare-const v18 (Array C Bool))
(declare-const v19 (Array C Bool))
(declare-const v20 (Array C Bool))
(declare-const v21 (Array C Bool))
(declare-const v22 (Array C Bool))

(assert (PRE x0 y0 v0))

(assert (TRANS x0 y0 x1 y1 v0 v1))
(assert (TRANS x1 y1 x2 y2 v1 v2))
(assert (TRANS x2 y2 x3 y3 v2 v3))
(assert (TRANS x3 y3 x4 y4 v3 v4))
(assert (TRANS x4 y4 x5 y5 v4 v5))
(assert (TRANS x5 y5 x6 y6 v5 v6))
(assert (TRANS x6 y6 x7 y7 v6 v7))
(assert (TRANS x7 y7 x8 y8 v7 v8))
(assert (TRANS x8 y8 x9 y9 v8 v9))
(assert (TRANS x9 y9 x10 y10 v9 v10))
(assert (TRANS x10 y10 x11 y11 v10 v11))
(assert (TRANS x11 y11 x12 y12 v11 v12))
(assert (TRANS x12 y12 x13 y13 v12 v13))
(assert (TRANS x13 y13 x14 y14 v13 v14))
(assert (TRANS x14 y14 x15 y15 v14 v15))
(assert (TRANS x15 y15 x16 y16 v15 v16))
(assert (TRANS x16 y16 x17 y17 v16 v17))
(assert (TRANS x17 y17 x18 y18 v17 v18))
(assert (TRANS x18 y18 x19 y19 v18 v19))
(assert (TRANS x19 y19 x20 y20 v19 v20))
(assert (TRANS x20 y20 x21 y21 v20 v21))
(assert (TRANS x21 y21 x22 y22 v21 v22))

(assert (POST x22 y22 v0))

(check-sat)

(get-value (x0 y0 v0))
(echo "")
(get-value (x22 y22 v0))


